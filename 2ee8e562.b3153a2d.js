/*! For license information please see 2ee8e562.b3153a2d.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{112:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return p}));var n=a(2),r=a(6),c=(a(0),a(136)),b=(a(142),a(141),a(139)),i={id:"apis",title:"APIs Documentation",sidebar_label:"APIs Documentation"},o={id:"apis/apis",title:"APIs Documentation",description:"Understand APIs and their usage to make different face applications.",source:"@site/docs/apis/apis.md",permalink:"/shunyaface/docs/apis/apis",sidebar_label:"APIs Documentation",sidebar:"intro",previous:{title:"Build your first AI Face Application",permalink:"/shunyaface/docs/get-started/first-app"}},l=[{value:"ShunyaFace APIs",id:"shunyaface-apis",children:[]},{value:"Face Recognition API",id:"face-recognition-api",children:[{value:"Face Detection API",id:"face-detection-api",children:[]},{value:"Face Recogntion API",id:"face-recogntion-api",children:[]},{value:"Database API",id:"database-api",children:[]},{value:"Face Detection API",id:"face-detection-api-1",children:[]},{value:"Face Recogntion API",id:"face-recogntion-api-1",children:[]},{value:"Database API",id:"database-api-1",children:[]}]}],s={rightToc:l};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Understand APIs and their usage to make different face applications."),Object(c.b)("h2",{id:"shunyaface-apis"},"ShunyaFace APIs"),Object(c.b)("img",{alt:"install-shunya-os-gif",src:Object(b.a)("img/shunyaface.jpg")}),Object(c.b)("h2",{id:"face-recognition-api"},"Face Recognition API"),Object(c.b)("h3",{id:"face-detection-api"},"Face Detection API"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("strong",{parentName:"th"},"API")),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("strong",{parentName:"th"},"Description")))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"detectFace()")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"detects faces from given frame.")))),Object(c.b)("h3",{id:"face-recogntion-api"},"Face Recogntion API"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("strong",{parentName:"th"},"API")),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("strong",{parentName:"th"},"Description")))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"alignFace()")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"aligns the face with the FaceInfo given by detectFace API.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"getEmbeddings()")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Returns embeddings for frame which is 128-D vector")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"sameFace()")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"returns 1 if two images belong to same person.")))),Object(c.b)("h3",{id:"database-api"},"Database API"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("strong",{parentName:"th"},"API")),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("strong",{parentName:"th"},"Description")))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"storeFace()")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"store face-embeddings to database.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"findFace()")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"find face from database.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"db_flush()")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"flushes the database entries.")))),Object(c.b)("h3",{id:"face-detection-api-1"},"Face Detection API"),Object(c.b)("h4",{id:"detectface"},Object(c.b)("inlineCode",{parentName:"h4"},"detectFace()")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Description")," : Detects a face and returns the FaceInfo for each face includes : Confidence score, X,Y Co-ordinates for Face rectangle, area, landmarks etc."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Return-type")," : ",Object(c.b)("inlineCode",{parentName:"p"},"vector<FaceInfo>")," . FaceInfo is a structure which declaration is given in shunyaface.h."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),"    typedef struct FaceInfo {\n        float score;\n        int x[2];\n        int y[2];\n        float area;\n        float regreCoord[4];\n        int landmark[10];\n    } FaceInfo;\n")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Usage")," :"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),"           Define the structure given above.\n            \n           #include<ai/shunyaface.h>\n       \n           cv::Mat frame;\n\n           vector<FaceInfo>faces = detectFace(frame); //call detectFace function\n         //the frame above given is raw frame and not MTCNN cropped frame.\n")),Object(c.b)("h3",{id:"face-recogntion-api-1"},"Face Recogntion API"),Object(c.b)("h4",{id:"alignface"},Object(c.b)("inlineCode",{parentName:"h4"},"alignFace()")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Description")," : aligns the face with the FaceInfo given by detectFace API, face is aligned and cropped."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Return-type")," : cv::Mat"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Usage"),": "),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),"      FaceInfo faces;\n      cv::Mat alignedFrame = alignFace(frame,FaceInfo faces[0]);  //call face_features using facerec instance\n         //the frame above given MTCNN cropped frame.\n\n")),Object(c.b)("hr",null),Object(c.b)("h4",{id:"getembeddings"},Object(c.b)("inlineCode",{parentName:"h4"},"getEmbeddings()")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Description")," : returns vector of 128-D having unique face information."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Return-type")," : ",Object(c.b)("inlineCode",{parentName:"p"},"vector<float>")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Usage")," : "),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),"        vector<float> features; \n\n        embedding = getEmbeddings(alignedFrame);  //call getEmbeddings function\n")),Object(c.b)("hr",null),Object(c.b)("h4",{id:"sameface"},Object(c.b)("inlineCode",{parentName:"h4"},"sameFace()")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Description")," : checks whether two face embeddings belong to same person or not"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Return-type")," : int"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")," : "),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"      returns 1 , if two frames belong to same person\n\n      returns 0, if two frames doesn't belong to same person\n")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Usage")," : "),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),"          int val;\n\n          val = sameFace(embedding1, embedding2);  //call sameFace() function\n")),Object(c.b)("hr",null),Object(c.b)("h3",{id:"database-api-1"},"Database API"),Object(c.b)("h4",{id:"storeface"},Object(c.b)("inlineCode",{parentName:"h4"},"storeFace()")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Description")," : stores facial embeddings to database with name tag "),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Return-type")," : int - 1 on success\non error code exists by giving an error message."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Usage")," : "),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),'         num = storeFace(embeddings,name,"dbfile.txt");  //call storeFace() function\n\n')),Object(c.b)("hr",null),Object(c.b)("h4",{id:"findface"},Object(c.b)("inlineCode",{parentName:"h4"},"findFace()")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Description"),": find name of face from the database "),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Return-type"),": string "),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns"),' :\nreturns name for the person if found in the database or returns "NULL" if no face is found.'),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Usage"),": "),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),'          string name;\n          \n          name = findFace(frame,"dbfile.txt");   // call findFace function\n')),Object(c.b)("hr",null),Object(c.b)("h4",{id:"dbflush"},Object(c.b)("inlineCode",{parentName:"h4"},"dbFlush()")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Description")," : flushes the database entries "),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Return-type"),": returns 1 on success"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"usage")," : "),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),"          int val = dbFlush(dbfilename);  //call dbflush() function\n")))}p.isMDXComponent=!0},136:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return O}));var n=a(0),r=a.n(n);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function b(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?b(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):b(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),s=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=s(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,c=e.originalType,b=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),p=s(a),d=n,O=p["".concat(b,".").concat(d)]||p[d]||u[d]||c;return a?r.a.createElement(O,i(i({ref:t},l),{},{components:a})):r.a.createElement(O,i({ref:t},l))}));function O(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=a.length,b=new Array(c);b[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,b[1]=i;for(var l=2;l<c;l++)b[l]=a[l];return r.a.createElement.apply(null,b)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},137:function(e,t,a){"use strict";var n=a(0),r=a(34);t.a=function(){return Object(n.useContext)(r.a)}},138:function(e,t,a){var n;!function(){"use strict";var a={}.hasOwnProperty;function r(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var c=typeof n;if("string"===c||"number"===c)e.push(n);else if(Array.isArray(n)&&n.length){var b=r.apply(null,n);b&&e.push(b)}else if("object"===c)for(var i in n)a.call(n,i)&&n[i]&&e.push(i)}}return e.join(" ")}e.exports?(r.default=r,e.exports=r):void 0===(n=function(){return r}.apply(t,[]))||(e.exports=n)}()},139:function(e,t,a){"use strict";a.d(t,"a",(function(){return r}));var n=a(137);function r(e){const{siteConfig:t}=Object(n.a)(),{baseUrl:a="/"}=t||{};if(!e)return e;return/^(https?:|\/\/)/.test(e)?e:e.startsWith("/")?a+e.slice(1):a+e}},140:function(e,t,a){"use strict";var n=a(0);const r=Object(n.createContext)({tabGroupChoices:{},setTabGroupChoices:()=>{}});t.a=r},141:function(e,t,a){"use strict";var n=a(0),r=a.n(n);t.a=function(e){return r.a.createElement("div",null,e.children)}},142:function(e,t,a){"use strict";var n=a(0),r=a.n(n),c=a(140);var b=function(){return Object(n.useContext)(c.a)},i=a(138),o=a.n(i),l=a(92),s=a.n(l);const p=37,u=39;t.a=function(e){const{block:t,children:a,defaultValue:c,values:i,groupId:l}=e,{tabGroupChoices:d,setTabGroupChoices:O}=b(),[m,f]=Object(n.useState)(c);if(null!=l){const e=d[l];null!=e&&e!==m&&f(e)}const j=e=>{f(e),null!=l&&O(l,e)},g=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:o()("tabs",{"tabs--block":t})},i.map(({value:e,label:t})=>r.a.createElement("li",{role:"tab",tabIndex:"0","aria-selected":m===e,className:o()("tabs__item",s.a.tabItem,{"tabs__item--active":m===e}),key:e,ref:e=>g.push(e),onKeyDown:e=>((e,t,a)=>{switch(a.keyCode){case u:((e,t)=>{const a=e.indexOf(t)+1;e[a]?e[a].focus():e[0].focus()})(e,t);break;case p:((e,t)=>{const a=e.indexOf(t)-1;e[a]?e[a].focus():e[e.length-1].focus()})(e,t)}})(g,e.target,e),onFocus:()=>j(e),onClick:()=>j(e)},t))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},n.Children.toArray(a).filter(e=>e.props.value===m)[0]))}}}]);