/*! For license information please see 5b4d6ce8.98499ed5.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{117:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return b})),t.d(a,"metadata",(function(){return s})),t.d(a,"rightToc",(function(){return u})),t.d(a,"default",(function(){return p}));var n=t(2),c=t(6),r=(t(0),t(136)),o=t(142),l=t(141),i=t(139),b={id:"face-recognition",title:"Face Recognition",sidebar_label:"Demo - Face Recognition"},s={id:"demos/face-recognition",title:"Face Recognition",description:"The demo can be used to register and recognize a face of a person on edge device with ShunyaFace APIs.",source:"@site/docs/demos/face-recognition.md",permalink:"/shunyaface/docs/demos/face-recognition",sidebar_label:"Demo - Face Recognition",sidebar:"intro",next:{title:"Build your first AI Face Application",permalink:"/shunyaface/docs/get-started/first-app"}},u=[{value:"What will you need?",id:"what-will-you-need",children:[]},{value:"Steps",id:"steps",children:[]},{value:"Step 1: Install Shunya OS",id:"step-1-install-shunya-os",children:[{value:"Install Etcher",id:"install-etcher",children:[]},{value:"Flash Shunya OS",id:"flash-shunya-os",children:[]},{value:"Booting Up with Shunya OS",id:"booting-up-with-shunya-os",children:[]}]},{value:"Step 2: Lets code!",id:"step-2-lets-code",children:[{value:"Basic structure of Shunya Face",id:"basic-structure-of-shunya-face",children:[]},{value:"Lets read frame with opencv",id:"lets-read-frame-with-opencv",children:[]},{value:"API to detect faces from the given frame",id:"api-to-detect-faces-from-the-given-frame",children:[]},{value:"API to align the detected face",id:"api-to-align-the-detected-face",children:[]},{value:"API to get embeddings for aligned face",id:"api-to-get-embeddings-for-aligned-face",children:[]},{value:"API to store the face embeddings with the person name in database",id:"api-to-store-the-face-embeddings-with-the-person-name-in-database",children:[]},{value:"API to find the person name from his face embeddings",id:"api-to-find-the-person-name-from-his-face-embeddings",children:[]},{value:"Summary",id:"summary",children:[]}]},{value:"Step 3: Connect USB camera to RPI",id:"step-3-connect-usb-camera-to-rpi",children:[]},{value:"Step 4: Compile and Run",id:"step-4-compile-and-run",children:[{value:"Compile and Run",id:"compile-and-run",children:[]}]}],d={rightToc:u};function p(e){var a=e.components,t=Object(c.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},d,t,{components:a,mdxType:"MDXLayout"}),Object(r.b)("p",null,"The demo can be used to register and recognize a face of a person on edge device with ShunyaFace APIs."),Object(r.b)("img",{alt:"face-recog-png",align:"center",src:Object(i.a)("img/face-recog.png")}),Object(r.b)("a",{href:"https://mobidev.biz/blog/custom-face-detection-recognition-software-development?utm_source=towardsds&utm_medium=bigb&utm_campaign=source"}," ",Object(r.b)("h4",{align:"center"}," Source ")," "),Object(r.b)("h2",{id:"what-will-you-need"},"What will you need?"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Raspberry Pi 3/4 (or any variant of these)"),Object(r.b)("li",{parentName:"ol"},"micro-SD card and micro-SD card Reader/Adapter."),Object(r.b)("li",{parentName:"ol"},"USB Camera"),Object(r.b)("li",{parentName:"ol"},"Laptop")),Object(r.b)("h2",{id:"steps"},"Steps"),Object(r.b)("p",null,"Make your own Face-Recognition Application following these steps."),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Install Shunya OS "),Object(r.b)("li",{parentName:"ol"},"Write Code"),Object(r.b)("li",{parentName:"ol"},"Connect Camera to Hardware "),Object(r.b)("li",{parentName:"ol"},"Compile and Run")),Object(r.b)("h2",{id:"step-1-install-shunya-os"},"Step 1: Install Shunya OS"),Object(r.b)("p",null,"Shunya Face is built on top of Shunya OS and comes pre-installed with Shunya Face package.\nShunya OS is an linux-based OS that runs on your hardware, it light-weight and configurable."),Object(r.b)("h3",{id:"install-etcher"},"Install Etcher"),Object(r.b)("p",null,"Etcher allows you to Flash Shunya OS on the micro-SD card."),Object(r.b)(o.a,{defaultValue:"nix",values:[{label:"Windows",value:"win"},{label:"Ubuntu",value:"nix"}],mdxType:"Tabs"},Object(r.b)(l.a,{value:"nix",mdxType:"TabItem"},Object(r.b)("h4",{id:"for-ubuntu-1604"},"For Ubuntu 16.04"),Object(r.b)("p",null,"Installing Etcher is Simple, just run few commands in the terminal"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Download ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.balena.io/etcher/"}),"balenaEtcher")," for Linux 64bit (depends on your system). "),Object(r.b)("li",{parentName:"ol"},"Extract the zip file"),Object(r.b)("li",{parentName:"ol"},"Open terminal in the same location where the file is extracted and run this command")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),"./balenaEtcher-1.5.100-x64.AppImage\n")),Object(r.b)("p",null,"It will open Etcher window in front of you")),Object(r.b)(l.a,{value:"win",mdxType:"TabItem"},Object(r.b)("h4",{id:"for-windows-10"},"For Windows 10"),Object(r.b)("p",null,"Installing Etcher is Simple, download the executable file and Run."),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Download ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.balena.io/etcher/"}),"balenaEtcher")," for Windows. "),Object(r.b)("li",{parentName:"ol"},"Run balenaEtcherSetup-xxx.exe")))),Object(r.b)("h3",{id:"flash-shunya-os"},"Flash Shunya OS"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Download ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"http://releases.shunyaos.org/interfaces-images/"}),"Shunya OS")),Object(r.b)("li",{parentName:"ol"},"Right click on the downloaded zip file."),Object(r.b)("li",{parentName:"ol"},"Click Extract here."),Object(r.b)("li",{parentName:"ol"},"Open Etcher (with the comment give above)"),Object(r.b)("li",{parentName:"ol"},"Click Select Image."),Object(r.b)("li",{parentName:"ol"},"You will find the Shunya OS ",Object(r.b)("inlineCode",{parentName:"li"},".img")," file in the folder that we had extracted earlier. "),Object(r.b)("li",{parentName:"ol"},"Select ",Object(r.b)("inlineCode",{parentName:"li"},"shunya-aaaa-image-xxxx.img")," file."),Object(r.b)("li",{parentName:"ol"},"Insert SD card."),Object(r.b)("li",{parentName:"ol"},"Click on Flash. ")),Object(r.b)("img",{alt:"install-shunya-os-gif",src:Object(i.a)("img/install.gif")}),Object(r.b)("p",null,"This will load the micro-SD card with Shunya OS."),Object(r.b)("h3",{id:"booting-up-with-shunya-os"},"Booting Up with Shunya OS"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Insert the micro-SD card into the board. "),Object(r.b)("li",{parentName:"ol"},"Connect peripherals like Keyboard, Mouse and HDMI monitor. "),Object(r.b)("li",{parentName:"ol"},"Connect Power Supply. ")),Object(r.b)("p",null,"The board should boot up with Shunya OS."),Object(r.b)("h4",{id:"login-to-shunya"},"Login to Shunya"),Object(r.b)("p",null,"Login with these credentials:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Username : shunya"),Object(r.b)("li",{parentName:"ul"},"Password : shunya ")),Object(r.b)("h2",{id:"step-2-lets-code"},"Step 2: Lets code!"),Object(r.b)("p",null,"Open up your editor on Shunya OS and lets start coding."),Object(r.b)("p",null,"Our application must be able to  "),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Capture a face from camera feed"),Object(r.b)("li",{parentName:"ol"},"Detect Face from the frame"),Object(r.b)("li",{parentName:"ol"},"Get Embeddings of a detected Face"),Object(r.b)("li",{parentName:"ol"},"Store Embeddings in the database"),Object(r.b)("li",{parentName:"ol"},"Take different frame of same person and recognize the face"),Object(r.b)("li",{parentName:"ol"},"Display Recognized Person name in the terminal")),Object(r.b)("h3",{id:"basic-structure-of-shunya-face"},"Basic structure of Shunya Face"),Object(r.b)("p",null,"Use the basic structure as a reference and Paste code into the structure as per\nyour app logic."),Object(r.b)(o.a,{defaultValue:"c++",values:[{label:"CPP",value:"c++"}],mdxType:"Tabs"},Object(r.b)(l.a,{value:"c++",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),"/*Include this header file into your program */\n#include <ai/shunyaface.h>\n\nusing namespace cv;\nusing namespace std;\n\n/* Main Function */\nint main(int argc, char *argv[]) {\n\n\n/*####################################\n *       PASTE CODE HERE\n *####################################*/\n\n\n        return 0;\n}\n"))),Object(r.b)(l.a,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"comingsoon = 1\n"))),Object(r.b)(l.a,{value:"js",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var commingsoon = 1;\n")))),Object(r.b)("h3",{id:"lets-read-frame-with-opencv"},"Lets read frame with opencv"),Object(r.b)(o.a,{defaultValue:"c++",values:[{label:"CPP",value:"c++"}],mdxType:"Tabs"},Object(r.b)(l.a,{value:"c++",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),"/* Add opencv headerfile */\n#include <opencv2/opencv.hpp>\n/* Add this line to your main function \n * to read continuos frames from camera */\n\n   Mat frame;\n   VideoCapture cap;\n   if(!cap.open(0))\n        return 0;\n   for(;;)\n   {\n        cap >> frame;\n        if( frame.empty() ) break; // end of video stream\n        if( waitKey(10) == 27 ) break; // stop capturing by pressing ESC \n   }\n"))),Object(r.b)(l.a,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"commingsoon = 1\n"))),Object(r.b)(l.a,{value:"js",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var commingsoon = 1;\n")))),Object(r.b)("h3",{id:"api-to-detect-faces-from-the-given-frame"},"API to detect faces from the given frame"),Object(r.b)(o.a,{defaultValue:"c++",values:[{label:"CPP",value:"c++"}],mdxType:"Tabs"},Object(r.b)(l.a,{value:"c++",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),'/* Add this line to your main function inside for loop\n * to detect a face captured from opencv */\nvector<FaceInfo> detFaces;\ndetFaces = detectFace(frame);\nif (detFaces.size() > 0) {\n      cout<<"Face Detected!"<<endl;\n}\nelse {\n      cout<<"No face detected!"<<endl\n}\n'))),Object(r.b)(l.a,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"commingsoon = 1 \n"))),Object(r.b)(l.a,{value:"js",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var commingsoon = 1;\n")))),Object(r.b)("h3",{id:"api-to-align-the-detected-face"},"API to align the detected face"),Object(r.b)(o.a,{defaultValue:"c++",values:[{label:"CPP",value:"c++"}],mdxType:"Tabs"},Object(r.b)(l.a,{value:"c++",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),"/* Add these line to your main function if the number of detected faces > 1 */\n/* We are passing first detected face to alignFace function i.e. detFaces[0] */\nface = alignFace(frame, detFaces[0]);\n\n"))),Object(r.b)(l.a,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"comingsoon = 1\n"))),Object(r.b)(l.a,{value:"js",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var commingsoon = 1;\n")))),Object(r.b)("h3",{id:"api-to-get-embeddings-for-aligned-face"},"API to get embeddings for aligned face"),Object(r.b)(o.a,{defaultValue:"c++",values:[{label:"CPP",value:"c++"}],mdxType:"Tabs"},Object(r.b)(l.a,{value:"c++",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),"/* Add these line to your main function which gives 128D array of embeddings for a face */\nvector<float> embeddings;\nembeddings = getEmbeddings(face);\n"))),Object(r.b)(l.a,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"comingsoon = 1\n"))),Object(r.b)(l.a,{value:"js",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var commingsoon = 1;\n")))),Object(r.b)("h3",{id:"api-to-store-the-face-embeddings-with-the-person-name-in-database"},"API to store the face embeddings with the person name in database"),Object(r.b)(o.a,{defaultValue:"c++",values:[{label:"CPP",value:"c++"}],mdxType:"Tabs"},Object(r.b)(l.a,{value:"c++",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),'#define DATABASE "./db.txt" \n/* Add these line to your main function if you want to store a face in database*/\nstring name;\nif (argc > 1) {\n     /* Taking name from user */\n     name = argv[1];\n     int a = storeFace(embeddings,name,DATABASE);\n}\n'))),Object(r.b)(l.a,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"comingsoon = 1\n"))),Object(r.b)(l.a,{value:"js",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var commingsoon = 1;\n")))),Object(r.b)("h3",{id:"api-to-find-the-person-name-from-his-face-embeddings"},"API to find the person name from his face embeddings"),Object(r.b)(o.a,{defaultValue:"c++",values:[{label:"CPP",value:"c++"}],mdxType:"Tabs"},Object(r.b)(l.a,{value:"c++",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),"/* Add these line to your main function*/\nstring name;\nname = findFace(embeddings, DATABASE );\n"))),Object(r.b)(l.a,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"comingsoon = 1\n"))),Object(r.b)(l.a,{value:"js",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var commingsoon = 1;\n")))),Object(r.b)("h3",{id:"summary"},"Summary"),Object(r.b)("p",null,"Your Code should look something like this. "),Object(r.b)(o.a,{defaultValue:"c++",values:[{label:"CPP",value:"c++"}],mdxType:"Tabs"},Object(r.b)(l.a,{value:"c++",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-cpp"}),'#include <iostream>\n#include <vector>\n#include <opencv2/opencv.hpp>\n#include <fstream>\n#include <cstring>\n\n#include <ai/shunyaface.h>\n\n#define DATABASE "db.txt"\n\nusing namespace cv;\nusing namespace std;\n\n\nvoid usage () {\n   fprintf(stderr, "usage: facedemo");\n   fprintf(stderr, "     : Recognizes face stored in the database file.");\n   fprintf(stderr, "usage: facedemo [name]");\n   fprintf(stderr, "     : Stores face into the database");\n   fprintf(stderr, "    name: name for storing into the face database.");\n}\n\nint main(int argc, char *argv[])\n{\n    /* Variable to Store frame */\n    Mat frame;\n    VideoCapture cap;\n\n    if (!cap.open(0))\n        return 0;\n\n    /* Print Usage once regardless of the correct or incorrect usage*/\n    usage();\n    \n    for (;;) {\n        cap >> frame;\n\n        if ( frame.empty() ) break; // end of video stream\n\n        if ( waitKey(10) == 27 ) break; // stop capturing by pressing ESC\n\n        /* Initialize the variables */\n        vector<FaceInfo> detFaces;\n        vector<float> embeddings;\n        Mat face;\n        string name;\n\n        if (! frame.data ) { // Check for invalid input\n            cout <<"Could not open or find the image" << std::endl ;\n            return -1;\n        }\n\n        /* Detect the face */\n        detFaces = detectFace(frame);\n\n        /* Check if faces are detected or not */\n        if (detFaces.size() > 0) {\n            cout<<"Face Detected!"<<endl;\n            /* Align Face */\n            face = alignFace(frame, detFaces[0]);\n            /*Get embeddings from face*/\n            embeddings = getEmbeddings(face);\n            \n            /* Store face in database */\n            /* While storing the Face user is expected to enter name in command line arguments */\n            if (argc > 1) {\n                name = argv[1];\n                int a = storeFace(embeddings,name,DATABASE);\n\n                if (1 == a) {\n                    cout<<"Face is stored successfully";\n                    break;\n\n                } else {\n                    cout<<"There is some problem with storing face";\n                    break;\n                }\n\n            } else {\n                cout<<"\\nPlease enter your name as first argument.";\n                break;\n            }\n\n            /* Find face from the database.*/\n            name = findFace(embeddings, DATABASE );\n\n            if (name.compare("NULL") != 0) {\n                cout<<"Face Recognized: "<<name<<endl;\n\n            } else {\n                cout<<"No Face Recognized!"<<endl;\n            }\n\n        } else {\n            cout<<"No Face Detected!!\\n";\n        }\n    }\n\n    return 0;\n}\n'))),Object(r.b)(l.a,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"commingsoon = 1\n"))),Object(r.b)(l.a,{value:"js",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var commingsoon = 1;\n")))),Object(r.b)("h2",{id:"step-3-connect-usb-camera-to-rpi"},"Step 3: Connect USB camera to RPI"),Object(r.b)("img",{alt:"Oops!, No Image to display.",src:Object(i.a)("img/cam.png")}),Object(r.b)("h2",{id:"step-4-compile-and-run"},"Step 4: Compile and Run"),Object(r.b)("h3",{id:"compile-and-run"},"Compile and Run"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Clone code from the repository")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),"$ git clone https://github.com/shunyaos/shunyaface-demo.git\n$ cd shunyaface-demo\n")),Object(r.b)("p",null,"Compile the program. Run following commands."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"$ mkdir build\n$ cd build && cmake ..\n$ make -j4  \n")),Object(r.b)("p",null,"This will build the program and make it into a binary executable."),Object(r.b)("p",null,"Now Lets run it."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),'# To recognize a face\n./facedemo\n# To store a face\n# ./facedemo "Sneha"\n')),Object(r.b)("p",null,'You will see "Face Recognized: YourName" if your face embeddings are in database,\nelse it will say "No face recognized".'),Object(r.b)("h1",{id:"want-to-build-your-own-application"},"Want to Build your own Application?"),Object(r.b)("p",null,"Click on the Next button, below."))}p.isMDXComponent=!0},136:function(e,a,t){"use strict";t.d(a,"a",(function(){return u})),t.d(a,"b",(function(){return m}));var n=t(0),c=t.n(n);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,c=function(e,a){if(null==e)return{};var t,n,c={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(c[t]=e[t]);return c}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}var b=c.a.createContext({}),s=function(e){var a=c.a.useContext(b),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},u=function(e){var a=s(e.components);return c.a.createElement(b.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return c.a.createElement(c.a.Fragment,{},a)}},p=c.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,b=i(e,["components","mdxType","originalType","parentName"]),u=s(t),p=n,m=u["".concat(o,".").concat(p)]||u[p]||d[p]||r;return t?c.a.createElement(m,l(l({ref:a},b),{},{components:t})):c.a.createElement(m,l({ref:a},b))}));function m(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var r=t.length,o=new Array(r);o[0]=p;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var b=2;b<r;b++)o[b]=t[b];return c.a.createElement.apply(null,o)}return c.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},137:function(e,a,t){"use strict";var n=t(0),c=t(34);a.a=function(){return Object(n.useContext)(c.a)}},138:function(e,a,t){var n;!function(){"use strict";var t={}.hasOwnProperty;function c(){for(var e=[],a=0;a<arguments.length;a++){var n=arguments[a];if(n){var r=typeof n;if("string"===r||"number"===r)e.push(n);else if(Array.isArray(n)&&n.length){var o=c.apply(null,n);o&&e.push(o)}else if("object"===r)for(var l in n)t.call(n,l)&&n[l]&&e.push(l)}}return e.join(" ")}e.exports?(c.default=c,e.exports=c):void 0===(n=function(){return c}.apply(a,[]))||(e.exports=n)}()},139:function(e,a,t){"use strict";t.d(a,"a",(function(){return c}));var n=t(137);function c(e){const{siteConfig:a}=Object(n.a)(),{baseUrl:t="/"}=a||{};if(!e)return e;return/^(https?:|\/\/)/.test(e)?e:e.startsWith("/")?t+e.slice(1):t+e}},140:function(e,a,t){"use strict";var n=t(0);const c=Object(n.createContext)({tabGroupChoices:{},setTabGroupChoices:()=>{}});a.a=c},141:function(e,a,t){"use strict";var n=t(0),c=t.n(n);a.a=function(e){return c.a.createElement("div",null,e.children)}},142:function(e,a,t){"use strict";var n=t(0),c=t.n(n),r=t(140);var o=function(){return Object(n.useContext)(r.a)},l=t(138),i=t.n(l),b=t(92),s=t.n(b);const u=37,d=39;a.a=function(e){const{block:a,children:t,defaultValue:r,values:l,groupId:b}=e,{tabGroupChoices:p,setTabGroupChoices:m}=o(),[f,O]=Object(n.useState)(r);if(null!=b){const e=p[b];null!=e&&e!==f&&O(e)}const h=e=>{O(e),null!=b&&m(b,e)},g=[];return c.a.createElement("div",null,c.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:i()("tabs",{"tabs--block":a})},l.map(({value:e,label:a})=>c.a.createElement("li",{role:"tab",tabIndex:"0","aria-selected":f===e,className:i()("tabs__item",s.a.tabItem,{"tabs__item--active":f===e}),key:e,ref:e=>g.push(e),onKeyDown:e=>((e,a,t)=>{switch(t.keyCode){case d:((e,a)=>{const t=e.indexOf(a)+1;e[t]?e[t].focus():e[0].focus()})(e,a);break;case u:((e,a)=>{const t=e.indexOf(a)-1;e[t]?e[t].focus():e[e.length-1].focus()})(e,a)}})(g,e.target,e),onFocus:()=>h(e),onClick:()=>h(e)},a))),c.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},n.Children.toArray(t).filter(e=>e.props.value===f)[0]))}}}]);